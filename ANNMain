import java.util.Random;
import java.util.ArrayList;

//PLANNING
//Goal
  //To write an ANN that finds the fastest path from point S to point E
//Proccedure
  //Write a Node Map that has several nodes connected with weights
    //See Included file "Sadfig.png"
  //Write an ANN to figure out the fastest path
    //Get Random ready
    //Initial ANN is completely random choice; ignores all weights
    //Create new ANN that is same thing, just slightly different.
    //Compare two ANNs total weight; keep genes of best one
    //Every 10 ANNs, create totally new random one and compare


public class ANNMain{
  public static void main(String args[]){
    System.out.println("Hello world!");
    NodeMap nm = new NodeMap();
    System.out.println("Weight between J and E: " + nm.NodeWeights("J","E"));
    System.out.println("Weight between K and E: " + nm.NodeWeights("K","E"));
  }
}

//Basing it off of the attatched file "Sadfig.png"
class NodeMap{
  ArrayList<Node> nodes;
  
  public NodeMap(){
    nodes = new ArrayList<Node>();
    Node e = new Node("E");
    Node k = new Node("K");
    Node j = new Node("J");
    Node g = new Node
    
    //Node Adding
    e.ChildNode(j,2);
    e.ChildNode(k,7);
    nodes.add(e);
    k.ChildNode(e, 7);
    k.ChildNode(j,1);
    nodes.add(k);
    j.ChildNode(e, 2);
    j.ChildNode(k,1);
    nodes.add(j);
    
  }
  
  public Node GetNode(String s){
    if (nodes.size() > 0){
      for (int x = 0; x < nodes.size(); x++){
        if (nodes.get(x).name.equals(s)){
          return nodes.get(x);
        }
      }
    }
    return null;
  }
  
  public int NodeWeights(String nameStart, String nameEnd){
    Node start = GetNode(nameStart);
    Node end = GetNode(nameEnd);
    return start.GetChildWeight(end);
  }
}

class Node{
  ArrayList<Node> children;
  ArrayList<Integer> weights;
  String name;
  
  public Node(String s){
    children = new ArrayList<Node>();
    weights = new ArrayList<Integer>();
    name = s;
  }
  
  public int GetChildWeight(Node maybeChild){
    if (children.size() > 0){
      for (int x = 0; x < children.size(); x++){
        if (children.get(x).name.equals(maybeChild.name)){
          return weights.get(x);
        }
      }
    }
    return -999999;
  }
  
  public void ChildNode(Node n, int weight){
    children.add(n);
    weights.add(weight);
  }
  
  public Node GetRandomChild(){
    Random rand = new Random();
    if (children.size() > 1){
      return children.get(rand.nextInt(children.size()));
    }else if (children.size() == 1){
      return children.get(0);
    }else{
      return null;
    }
  }
  
}
